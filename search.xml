<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>android作业一</title>
      <link href="2021/04/01/android-task1/"/>
      <url>2021/04/01/android-task1/</url>
      
        <content type="html"><![CDATA[<h2 id="1-功能说明"><a href="#1-功能说明" class="headerlink" title="1. 功能说明"></a>1. 功能说明</h2><p>完成一个类微信界面的应用，本次是4个tab切换效果的完成。</p><ol><li>完成微信下面四个图标的展示</li><li>实现点击图标切换页面</li><li>实现图标状态切换颜色功能</li></ol><h2 id="2-功能分析"><a href="#2-功能分析" class="headerlink" title="2. 功能分析"></a>2. 功能分析</h2><h3 id="2-1-底部图标的排列"><a href="#2-1-底部图标的排列" class="headerlink" title="2.1 底部图标的排列"></a>2.1 底部图标的排列</h3><ol><li><p>创建一个横向的LinearLayout作为背景，用于排列图标</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>LinearLayout</span>        <span class="token attr-name"><span class="token namespace">android:</span>layout_width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>match_parent<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>layout_height</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>80dp<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>orientation</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>horizontal<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>baselineAligned</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>false<span class="token punctuation">"</span></span>        <span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>LinearLayout</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>在其内部创建4个纵向的LinearLayout作为图标</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>LinearLayout</span>            <span class="token attr-name"><span class="token namespace">android:</span>id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>@+id/id_tab_chat<span class="token punctuation">"</span></span>            <span class="token attr-name"><span class="token namespace">android:</span>layout_width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>0dp<span class="token punctuation">"</span></span>            <span class="token attr-name"><span class="token namespace">android:</span>layout_height</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>match_parent<span class="token punctuation">"</span></span>            <span class="token attr-name"><span class="token namespace">android:</span>layout_weight</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>1<span class="token punctuation">"</span></span>            <span class="token attr-name"><span class="token namespace">android:</span>gravity</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>center<span class="token punctuation">"</span></span>            <span class="token attr-name"><span class="token namespace">android:</span>orientation</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>vertical<span class="token punctuation">"</span></span>            <span class="token attr-name"><span class="token namespace">android:</span>background</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>#F7F7F7<span class="token punctuation">"</span></span>            <span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ImageView</span>                <span class="token attr-name"><span class="token namespace">android:</span>id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>@+id/id_tab_chat_img<span class="token punctuation">"</span></span>                <span class="token attr-name"><span class="token namespace">android:</span>layout_width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>match_parent<span class="token punctuation">"</span></span>                <span class="token attr-name"><span class="token namespace">android:</span>layout_height</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>wrap_content<span class="token punctuation">"</span></span>                <span class="token attr-name"><span class="token namespace">app:</span>srcCompat</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>@drawable/bottom_chat<span class="token punctuation">"</span></span>                <span class="token attr-name"><span class="token namespace">android:</span>clickable</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>false<span class="token punctuation">"</span></span>                <span class="token attr-name"><span class="token namespace">android:</span>contentDescription</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>@string/app_name<span class="token punctuation">"</span></span>                <span class="token punctuation">/></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>TextView</span>                <span class="token attr-name"><span class="token namespace">android:</span>id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>@+id/id_tab_chat_text<span class="token punctuation">"</span></span>                <span class="token attr-name"><span class="token namespace">android:</span>layout_width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>match_parent<span class="token punctuation">"</span></span>                <span class="token attr-name"><span class="token namespace">android:</span>layout_height</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>wrap_content<span class="token punctuation">"</span></span>                <span class="token attr-name"><span class="token namespace">android:</span>text</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>微信<span class="token punctuation">"</span></span>                <span class="token attr-name"><span class="token namespace">android:</span>gravity</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>center<span class="token punctuation">"</span></span>                <span class="token attr-name"><span class="token namespace">android:</span>clickable</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>false<span class="token punctuation">"</span></span>                <span class="token attr-name"><span class="token namespace">android:</span>textSize</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>15sp<span class="token punctuation">"</span></span>                <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>LinearLayout</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>在activity_main中引入</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>include</span>        <span class="token attr-name">layout</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>@layout/bottom_chat<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>layout_width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>match_parent<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>layout_height</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>wrap_content<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li></ol><h3 id="2-2-实现点击切换页面"><a href="#2-2-实现点击切换页面" class="headerlink" title="2.2 实现点击切换页面"></a>2.2 实现点击切换页面</h3><ol><li><p>编写相关fragment</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>TextView</span>        <span class="token attr-name"><span class="token namespace">android:</span>layout_width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>match_parent<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>layout_height</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>match_parent<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>text</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>微信<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>textSize</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>30sp<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>gravity</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>center<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>textColor</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>@color/black<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>在MainActivity.java中定义变量并初始化</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">private</span> <span class="token class-name">Fragment</span> chat <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Chat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">private</span> <span class="token class-name">Fragment</span> find <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Find</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">private</span> <span class="token class-name">Fragment</span> mailList <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MailList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">private</span> <span class="token class-name">Fragment</span> me <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Me</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">private</span> <span class="token class-name">ImageView</span> imgChat<span class="token punctuation">;</span><span class="token keyword">private</span> <span class="token class-name">ImageView</span> imgMailList<span class="token punctuation">;</span><span class="token keyword">private</span> <span class="token class-name">ImageView</span> imgFind<span class="token punctuation">;</span><span class="token keyword">private</span> <span class="token class-name">ImageView</span> imgMe<span class="token punctuation">;</span><span class="token keyword">private</span> <span class="token class-name">LinearLayout</span> llChat<span class="token punctuation">;</span><span class="token keyword">private</span> <span class="token class-name">LinearLayout</span> llMailList<span class="token punctuation">;</span><span class="token keyword">private</span> <span class="token class-name">LinearLayout</span> llFind<span class="token punctuation">;</span><span class="token keyword">private</span> <span class="token class-name">LinearLayout</span> llMe<span class="token punctuation">;</span><span class="token keyword">private</span> <span class="token class-name">FragmentManager</span> fm<span class="token punctuation">;</span><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">initFragment</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    fm <span class="token operator">=</span> <span class="token function">getSupportFragmentManager</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">FragmentTransaction</span> transaction <span class="token operator">=</span> fm<span class="token punctuation">.</span><span class="token function">beginTransaction</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    transaction<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token class-name">R</span><span class="token punctuation">.</span>id<span class="token punctuation">.</span>id_content<span class="token punctuation">,</span> chat<span class="token punctuation">)</span><span class="token punctuation">;</span>    transaction<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token class-name">R</span><span class="token punctuation">.</span>id<span class="token punctuation">.</span>id_content<span class="token punctuation">,</span> find<span class="token punctuation">)</span><span class="token punctuation">;</span>    transaction<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token class-name">R</span><span class="token punctuation">.</span>id<span class="token punctuation">.</span>id_content<span class="token punctuation">,</span> mailList<span class="token punctuation">)</span><span class="token punctuation">;</span>    transaction<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token class-name">R</span><span class="token punctuation">.</span>id<span class="token punctuation">.</span>id_content<span class="token punctuation">,</span> me<span class="token punctuation">)</span><span class="token punctuation">;</span>    transaction<span class="token punctuation">.</span><span class="token function">commit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">initView</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    llChat <span class="token operator">=</span> <span class="token function">findViewById</span><span class="token punctuation">(</span><span class="token class-name">R</span><span class="token punctuation">.</span>id<span class="token punctuation">.</span>id_tab_chat<span class="token punctuation">)</span><span class="token punctuation">;</span>    llMailList <span class="token operator">=</span> <span class="token function">findViewById</span><span class="token punctuation">(</span><span class="token class-name">R</span><span class="token punctuation">.</span>id<span class="token punctuation">.</span>id_tab_mailList<span class="token punctuation">)</span><span class="token punctuation">;</span>    llFind <span class="token operator">=</span> <span class="token function">findViewById</span><span class="token punctuation">(</span><span class="token class-name">R</span><span class="token punctuation">.</span>id<span class="token punctuation">.</span>id_tab_find<span class="token punctuation">)</span><span class="token punctuation">;</span>    llMe <span class="token operator">=</span> <span class="token function">findViewById</span><span class="token punctuation">(</span><span class="token class-name">R</span><span class="token punctuation">.</span>id<span class="token punctuation">.</span>id_tab_me<span class="token punctuation">)</span><span class="token punctuation">;</span>    imgChat <span class="token operator">=</span> <span class="token function">findViewById</span><span class="token punctuation">(</span><span class="token class-name">R</span><span class="token punctuation">.</span>id<span class="token punctuation">.</span>id_tab_chat_img<span class="token punctuation">)</span><span class="token punctuation">;</span>    imgMailList <span class="token operator">=</span> <span class="token function">findViewById</span><span class="token punctuation">(</span><span class="token class-name">R</span><span class="token punctuation">.</span>id<span class="token punctuation">.</span>id_tab_mailList_img<span class="token punctuation">)</span><span class="token punctuation">;</span>    imgFind <span class="token operator">=</span> <span class="token function">findViewById</span><span class="token punctuation">(</span><span class="token class-name">R</span><span class="token punctuation">.</span>id<span class="token punctuation">.</span>id_tab_find_img<span class="token punctuation">)</span><span class="token punctuation">;</span>    imgMe <span class="token operator">=</span> <span class="token function">findViewById</span><span class="token punctuation">(</span><span class="token class-name">R</span><span class="token punctuation">.</span>id<span class="token punctuation">.</span>id_tab_me_img<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>编写显示规则</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onClick</span><span class="token punctuation">(</span><span class="token class-name">View</span> v<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">switch</span> <span class="token punctuation">(</span>v<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">case</span> <span class="token class-name">R</span><span class="token punctuation">.</span>id<span class="token punctuation">.</span>id_tab_chat<span class="token operator">:</span>            <span class="token function">selectFragment</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token keyword">case</span> <span class="token class-name">R</span><span class="token punctuation">.</span>id<span class="token punctuation">.</span>id_tab_mailList<span class="token operator">:</span>            <span class="token function">selectFragment</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token keyword">case</span> <span class="token class-name">R</span><span class="token punctuation">.</span>id<span class="token punctuation">.</span>id_tab_find<span class="token operator">:</span>            <span class="token function">selectFragment</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token keyword">case</span> <span class="token class-name">R</span><span class="token punctuation">.</span>id<span class="token punctuation">.</span>id_tab_me<span class="token operator">:</span>            <span class="token function">selectFragment</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">selectFragment</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token class-name">FragmentTransaction</span> transaction <span class="token operator">=</span> fm<span class="token punctuation">.</span><span class="token function">beginTransaction</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 隐藏Fragment</span>    <span class="token function">hideFragment</span><span class="token punctuation">(</span>transaction<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">switch</span> <span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">case</span> <span class="token number">0</span><span class="token operator">:</span>            transaction<span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span>chat<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token keyword">case</span> <span class="token number">1</span><span class="token operator">:</span>            transaction<span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span>mailList<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token keyword">case</span> <span class="token number">2</span><span class="token operator">:</span>            transaction<span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span>find<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token keyword">case</span> <span class="token number">3</span><span class="token operator">:</span>            transaction<span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span>me<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token keyword">default</span><span class="token operator">:</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    transaction<span class="token punctuation">.</span><span class="token function">commit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">hideFragment</span><span class="token punctuation">(</span><span class="token class-name">FragmentTransaction</span> transaction<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    transaction<span class="token punctuation">.</span><span class="token function">hide</span><span class="token punctuation">(</span>chat<span class="token punctuation">)</span><span class="token punctuation">;</span>    transaction<span class="token punctuation">.</span><span class="token function">hide</span><span class="token punctuation">(</span>mailList<span class="token punctuation">)</span><span class="token punctuation">;</span>    transaction<span class="token punctuation">.</span><span class="token function">hide</span><span class="token punctuation">(</span>find<span class="token punctuation">)</span><span class="token punctuation">;</span>    transaction<span class="token punctuation">.</span><span class="token function">hide</span><span class="token punctuation">(</span>me<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><h3 id="2-3-实现颜色切换"><a href="#2-3-实现颜色切换" class="headerlink" title="2.3 实现颜色切换"></a>2.3 实现颜色切换</h3><ol><li><p>新建一个绿色图标，只需修改原图标颜色为绿色</p></li><li><p>设置点击时重置所有图标颜色，并将所点击的图标切换为绿色图标</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">resetImg</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    imgChat<span class="token punctuation">.</span><span class="token function">setImageResource</span><span class="token punctuation">(</span><span class="token class-name">R</span><span class="token punctuation">.</span>drawable<span class="token punctuation">.</span>bottom_chat<span class="token punctuation">)</span><span class="token punctuation">;</span>    imgMailList<span class="token punctuation">.</span><span class="token function">setImageResource</span><span class="token punctuation">(</span><span class="token class-name">R</span><span class="token punctuation">.</span>drawable<span class="token punctuation">.</span>bottom_mail_list<span class="token punctuation">)</span><span class="token punctuation">;</span>    imgFind<span class="token punctuation">.</span><span class="token function">setImageResource</span><span class="token punctuation">(</span><span class="token class-name">R</span><span class="token punctuation">.</span>drawable<span class="token punctuation">.</span>bottom_find<span class="token punctuation">)</span><span class="token punctuation">;</span>    imgMe<span class="token punctuation">.</span><span class="token function">setImageResource</span><span class="token punctuation">(</span><span class="token class-name">R</span><span class="token punctuation">.</span>drawable<span class="token punctuation">.</span>bottom_me<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">selectFragment</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token class-name">FragmentTransaction</span> transaction <span class="token operator">=</span> fm<span class="token punctuation">.</span><span class="token function">beginTransaction</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 隐藏Fragment</span>    <span class="token function">hideFragment</span><span class="token punctuation">(</span>transaction<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">switch</span> <span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">case</span> <span class="token number">0</span><span class="token operator">:</span>            transaction<span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span>chat<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">// 设置点击时显示状态(图标)</span>            imgChat<span class="token punctuation">.</span><span class="token function">setImageResource</span><span class="token punctuation">(</span><span class="token class-name">R</span><span class="token punctuation">.</span>drawable<span class="token punctuation">.</span>green_bottom_chat<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token keyword">case</span> <span class="token number">1</span><span class="token operator">:</span>            transaction<span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span>mailList<span class="token punctuation">)</span><span class="token punctuation">;</span>          imgMailList<span class="token punctuation">.</span><span class="token function">setImageResource</span><span class="token punctuation">(</span><span class="token class-name">R</span><span class="token punctuation">.</span>drawable<span class="token punctuation">.</span>green_bottom_mail_list<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token keyword">case</span> <span class="token number">2</span><span class="token operator">:</span>            transaction<span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span>find<span class="token punctuation">)</span><span class="token punctuation">;</span>            imgFind<span class="token punctuation">.</span><span class="token function">setImageResource</span><span class="token punctuation">(</span><span class="token class-name">R</span><span class="token punctuation">.</span>drawable<span class="token punctuation">.</span>green_bottom_find<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token keyword">case</span> <span class="token number">3</span><span class="token operator">:</span>            transaction<span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span>me<span class="token punctuation">)</span><span class="token punctuation">;</span>            imgMe<span class="token punctuation">.</span><span class="token function">setImageResource</span><span class="token punctuation">(</span><span class="token class-name">R</span><span class="token punctuation">.</span>drawable<span class="token punctuation">.</span>green_bottom_me<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token keyword">default</span><span class="token operator">:</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    transaction<span class="token punctuation">.</span><span class="token function">commit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><h2 id="3-运行界面展示"><a href="#3-运行界面展示" class="headerlink" title="3. 运行界面展示"></a>3. 运行界面展示</h2><p><img src="https://cdn.jsdelivr.net/gh/ScarfBear/imgRepo/img/note/android/%E4%BD%9C%E4%B8%9A%E4%B8%80%E5%B1%95%E7%A4%BA%E5%9B%BE%E7%89%8701.png"></p><p><img src="https://cdn.jsdelivr.net/gh/ScarfBear/imgRepo/img/note/android/%E4%BD%9C%E4%B8%9A%E4%B8%80%E5%B1%95%E7%A4%BA%E5%9B%BE%E7%89%8702.png"></p><h2 id="4源码仓库"><a href="#4源码仓库" class="headerlink" title="4源码仓库"></a>4源码仓库</h2><p><a href="https://gitee.com/scarfbear/android.git">https://gitee.com/scarfbear/android.git</a></p>]]></content>
      
      
      <categories>
          
          <category> android </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Spring基础使用</title>
      <link href="2021/03/22/spring/"/>
      <url>2021/03/22/spring/</url>
      
        <content type="html"><![CDATA[<h2 id="1-什么是Spring"><a href="#1-什么是Spring" class="headerlink" title="1. 什么是Spring"></a>1. 什么是Spring</h2><p>Spring是一个轻量级的javaEE解决方案，整合了多种优秀的设计模式</p><ul><li><p>轻量级</p><p>对于运行环境没有要求（开源：tomcat,resion。收费：weblogic …）</p><p>代码的移植性高，不需要实现额外的接口</p></li><li><p>设计模式</p><p>工厂，代理，模板。</p></li><li><p>控制反转(IOC Inverse of Control)</p><p>把对于成员变量创建与赋值的控制权转交给Spring，从代码中转移到Spring工厂和配置文件中完成</p></li><li><p>依赖注入(Dependency Injection  DI)</p><p>当一个类需要另一个类时，就意味着依赖，一旦出现依赖，就可以把另一个类作为本类的成员变量，最终通过Spring配置文件进行注入(赋值)。</p></li></ul><h2 id="2-Spring-Hello-World"><a href="#2-Spring-Hello-World" class="headerlink" title="2. Spring Hello World"></a>2. Spring Hello World</h2><pre class="line-numbers language-none"><code class="language-none">环境：1. JDK1.8+2. Maven3.5+3. IDEA2018+4. SpringFramework 5.1.4 <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol><li><p>引入jar包</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-context<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>5.1.4.RELEASE<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>编写配置</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml">1. 配置文件的放置位置：任意位置 没有硬性要求2. 配置文件的命名   ：没有硬性要求  建议：applicationContext.xml<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>person<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span> ... <span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p>通过工厂类，获得对象</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">ApplicationContext</span><span class="token operator">:</span> <span class="token class-name">Spring</span>提供的工厂类对象非web环境 ： <span class="token class-name">ClassPathXmlApplicationContext</span> <span class="token punctuation">(</span>main junit<span class="token punctuation">)</span>web环境  ：  <span class="token class-name">XmlWebApplicationContext</span><span class="token class-name">ApplicationContext</span> cx <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ClassPathXmlApplicationContext</span><span class="token punctuation">(</span><span class="token string">"/applicationContext.xml"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Person</span> person <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Person</span><span class="token punctuation">)</span>cx<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span><span class="token string">"person"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//这样我们就通过spring工厂创建了一个对象</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><h2 id="3-注入"><a href="#3-注入" class="headerlink" title="3. 注入"></a>3. 注入</h2><h3 id="3-1-什么是注入"><a href="#3-1-什么是注入" class="headerlink" title="3.1 什么是注入"></a>3.1 什么是注入</h3><p>通过Spring工厂及配置文件，为所创建对象的成员变量赋值</p><h3 id="3-2-为什么需要注入"><a href="#3-2-为什么需要注入" class="headerlink" title="3.2 为什么需要注入"></a>3.2 为什么需要注入</h3><p>通过编码的方式为成员变量赋值存在耦合，将这部分的赋值转移到配置文件中可以解耦合</p><blockquote><p>衍生问题：之后我们更常用的是注解，不还是将赋值写在代码中了吗？</p></blockquote><p>spring的配置优先于注解，如果对注解不满意，可以在配置文件中对其进行覆盖，也不用修改代码</p><h3 id="3-3-如何注入"><a href="#3-3-如何注入" class="headerlink" title="3.3 如何注入"></a>3.3 如何注入</h3><h4 id="3-3-1-Set注入"><a href="#3-3-1-Set注入" class="headerlink" title="3.3.1 Set注入"></a>3.3.1 Set注入</h4><p>spring通过调用对象的set方法完成成员变量的赋值</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>user<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>cn.scarfbear.entity.User<span class="token punctuation">"</span></span> <span class="token punctuation">></span></span>    1. String + 8种基本类型            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>username<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>scarfbear<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>        <span class="token comment">&lt;!-- 简写 &lt;property name="username" value="scarfbear">&lt;/property> --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>    2. 数组        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>array<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>list</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>list</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>list<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>list</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>list</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>    4. set集合    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>set<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>set</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>set</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>    5. map    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>map<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>map</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>entry</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>key</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>scarfbear<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>key</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>围巾熊<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>entry</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>map</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>    6. Properties    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>props<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>props</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>prop</span> <span class="token attr-name">key</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>scarfbear<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>围巾熊<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>prop</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>props</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>    7. 自定义类    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>hello<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>cn.scarfbear.Hello<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span>        <span class="token comment">&lt;!-- &lt;bean id="hello" class="cn.scarfbear.Hello">&lt;/bean>     已经在工厂中配置配置过了id为hello的对象--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="3-3-2-构造注入（使用较少）"><a href="#3-3-2-构造注入（使用较少）" class="headerlink" title="3.3.2 构造注入（使用较少）"></a>3.3.2 构造注入（使用较少）</h4><p>Spring调用构造方法为成员变量赋值</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>constructor-arg</span><span class="token punctuation">></span></span>    xxx<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>constructor-arg</span><span class="token punctuation">></span></span>重载时参数个数不同时：通过控制<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>constructor-arg</span><span class="token punctuation">></span></span>标签的数量进行区分构造参数个数相同时：通过在标签引入 type属性 进行类型的区分 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>constructor-arg</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-4-类型转换器"><a href="#3-4-类型转换器" class="headerlink" title="3.4 类型转换器"></a>3.4 类型转换器</h3><ul><li><p>什么是类型转换器</p><p>我们在使用注入是value中的值都是String字面量，注入到对象中却转换成了对应的类型，此时就是类型转换器在起作用。</p><p>Spring提供了许多内置的类型转换器，比如String转8种基本类型，方便我们的使用。</p><p>但仍不能囊括我们所有的需求，比如String转Data类型，因为各个地区对于data类型的书写习惯不同，(eg:2021/3/20,2021-3-20)。而官方只提供了2021/3/20类型转换器，如果想设置为自己习惯的其他格式，就需要我们自定义类型转换器。</p></li><li><p>如何自定义类型转换器</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token number">1.</span> 实现<span class="token class-name">Converter</span><span class="token operator">&lt;</span>from类型，<span class="token keyword">to</span>类型<span class="token operator">></span>接口<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyDateConverter</span> <span class="token keyword">implements</span> <span class="token class-name">Converter</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Date</span><span class="token punctuation">></span></span> <span class="token punctuation">&#123;</span>    <span class="token comment">//日期格式，在下一步中注入，方便扩展</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> pattern<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setPattern</span><span class="token punctuation">(</span><span class="token class-name">String</span> pattern<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>pattern <span class="token operator">=</span> pattern<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>        <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">Date</span> <span class="token function">convert</span><span class="token punctuation">(</span><span class="token class-name">String</span> source<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Date</span> date <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">SimpleDateFormat</span> sdf <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SimpleDateFormat</span><span class="token punctuation">(</span>pattern<span class="token punctuation">)</span><span class="token punctuation">;</span>            date <span class="token operator">=</span> sdf<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>source<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">ParseException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> date<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token number">2.</span> 工厂中配置自定义的类型转换器<span class="token operator">&lt;</span>bean id<span class="token operator">=</span><span class="token string">"myDateConverter"</span> <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"xxx"</span><span class="token operator">></span>  <span class="token operator">&lt;</span>property name<span class="token operator">=</span><span class="token string">"pattern"</span> value<span class="token operator">=</span><span class="token string">"yyyy-MM-dd"</span><span class="token operator">/</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>bean<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h2 id="4-Spring创建对象"><a href="#4-Spring创建对象" class="headerlink" title="4. Spring创建对象"></a>4. Spring创建对象</h2><h3 id="4-1-常规对象的创建"><a href="#4-1-常规对象的创建" class="headerlink" title="4.1 常规对象的创建"></a>4.1 常规对象的创建</h3><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span> <span class="token attr-value"><span class="token punctuation attr-equals">=</span> <span class="token punctuation">"</span>xxx<span class="token punctuation">"</span></span> <span class="token attr-name">class</span> <span class="token attr-value"><span class="token punctuation attr-equals">=</span> <span class="token punctuation">"</span>xxx<span class="token punctuation">"</span></span> <span class="token attr-name">scope</span> <span class="token attr-value"><span class="token punctuation attr-equals">=</span> <span class="token punctuation">"</span>singleton/prototype<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>注入相关代码<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="4-2-复杂对象的创建"><a href="#4-2-复杂对象的创建" class="headerlink" title="4.2 复杂对象的创建"></a>4.2 复杂对象的创建</h3><p>复杂对象：不能通过new关键字直接创建的对象。eg：Connection,SqlSessionFactory</p><h4 id="4-2-1-实现FactoryBean接口"><a href="#4-2-1-实现FactoryBean接口" class="headerlink" title="4.2.1 实现FactoryBean接口"></a>4.2.1 实现FactoryBean接口</h4><p><img src="https://cdn.jsdelivr.net/gh/ScarfBear/imgRepo/img/note/spring/FactoryBean%E6%8E%A5%E5%8F%A3%E5%88%9B%E5%BB%BA%E5%A4%8D%E6%9D%82%E5%AF%B9%E8%B1%A1.png" alt="image-20210320105549814"></p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml">如果Class中指定的类型 是FactoryBean接口的实现类，那么通过id值获得的是这个类所创建的复杂对象<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>conn<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.baizhiedu.factorybean.ConnectionFactoryBean<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>如果想要获得FactoryBean对象本身则ctx.getBean("&amp;conn")<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h4 id="4-2-2-实例工厂"><a href="#4-2-2-实例工厂" class="headerlink" title="4.2.2 实例工厂"></a>4.2.2 实例工厂</h4><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml">好处：避免了Spring的侵入，整合遗留系统时使用。<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>connFactory<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.baizhiedu.factorybean.ConnectionFactory<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>conn<span class="token punctuation">"</span></span>  <span class="token attr-name">factory-bean</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>connFactory<span class="token punctuation">"</span></span> <span class="token attr-name">factory-method</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>getConnection<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="4-4-3-静态工厂"><a href="#4-4-3-静态工厂" class="headerlink" title="4.4.3 静态工厂"></a>4.4.3 静态工厂</h4><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>conn<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.baizhiedu.factorybean.StaticConnectionFactory<span class="token punctuation">"</span></span> <span class="token attr-name">factory-method</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>getConnection<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="5-Spring创建对象的生命周期"><a href="#5-Spring创建对象的生命周期" class="headerlink" title="5. Spring创建对象的生命周期"></a>5. Spring创建对象的生命周期</h2><p>一个对象创建，存活，消亡的过程。</p><h3 id="5-1-创建过程"><a href="#5-1-创建过程" class="headerlink" title="5.1 创建过程"></a>5.1 创建过程</h3><ul><li><p>scope=”singleton”</p><p>单例模式，工厂创建完成时就会创建对象</p></li><li><p>scope=”prototype”</p><p>多例模式，从工厂里获取对象时，完成创建</p></li></ul><h3 id="5-2-初始化"><a href="#5-2-初始化" class="headerlink" title="5.2 初始化"></a>5.2 初始化</h3><p>Spring在创建完对象后，会调用对象的初始化方法，我们可以根据需求再初始化方法中完成自己需要的功能</p><p>如何自定义初始化方法？</p><ul><li><p>实现InitializingBean接口</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">User</span> <span class="token keyword">implements</span> <span class="token class-name">InitializingBean</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">afterPropertiesSet</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"我初始化了"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>在bean中将普通方法设为初始化方法</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">myInit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"我初始化了"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token operator">&lt;</span>bean id<span class="token operator">=</span><span class="token string">"user"</span> <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"xxx"</span> init<span class="token operator">-</span>method<span class="token operator">=</span><span class="token string">"myInit"</span><span class="token operator">/</span><span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h3 id="5-3-销毁"><a href="#5-3-销毁" class="headerlink" title="5.3 销毁"></a>5.3 销毁</h3><p>Spring销毁对象前，会调用对象的销毁方法，完成销毁操作（只适用于单例）。</p><ul><li><p>何时销毁？</p><p>工厂关闭时 ctx.close();</p></li><li><p>自定义销毁方法</p><p>同上</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//实现接口</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">User</span> <span class="token keyword">implements</span> <span class="token class-name">InitializingBean</span><span class="token punctuation">,</span> <span class="token class-name">DisposableBean</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">destroy</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">&#123;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"我被销毁了了"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">//在bean中将普通方法设为初始化方法</span><span class="token operator">&lt;</span>bean id<span class="token operator">=</span><span class="token string">"user"</span> <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"xxx"</span> destroy<span class="token operator">-</span>method<span class="token operator">=</span><span class="token string">"myDestroy"</span><span class="token operator">/</span><span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h2 id="6-Aop"><a href="#6-Aop" class="headerlink" title="6. Aop"></a>6. Aop</h2><p>Aop(Aspect Oriented Programming) 面向切面编程</p><ul><li><p>为什么要使用Aop?</p><p>在写业务类的时候，有一些和业务代码无关的额外功能，例如日志记录，事务控制等功能，很多类都需要。然而直接写在业务类中既累赘又容易与业务代码混淆，此时就需要用到Aop。</p><p>Spring使用代理模式解决这个问题，我们把业务代码写在原始类中，然后再创造一个代理类将原始类与额外功能整合起来，使用时使用代理对象。</p></li></ul><h3 id="6-1-静态代理（不用）"><a href="#6-1-静态代理（不用）" class="headerlink" title="6.1 静态代理（不用）"></a>6.1 静态代理（不用）</h3><p>为所有的原始类手动编写一个代理类</p><p><img src="https://cdn.jsdelivr.net/gh/ScarfBear/imgRepo/img/note/spring/%E9%9D%99%E6%80%81%E4%BB%A3%E7%90%86.png" alt="image-20210320202223194"></p><ul><li><p>为什么不用？</p><p>文件过多不好管理</p><p>维护和修改麻烦</p></li></ul><h3 id="6-2-动态代理"><a href="#6-2-动态代理" class="headerlink" title="6.2 动态代理"></a>6.2 动态代理</h3><p>解决了静态代理的通点，并且实现了代理功能</p><ul><li><p>所需依赖</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.aspectj<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>aspectjrt<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.8.8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.aspectj<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>aspectjweaver<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.8.3<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h4 id="6-2-1-MethodBeforeAdvice接口"><a href="#6-2-1-MethodBeforeAdvice接口" class="headerlink" title="6.2.1 MethodBeforeAdvice接口"></a>6.2.1 MethodBeforeAdvice接口</h4><ol><li><p>编写额外功能（只能在前面添加额外功能，感觉用处不大）</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Before</span> <span class="token keyword">implements</span> <span class="token class-name">MethodBeforeAdvice</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">before</span><span class="token punctuation">(</span><span class="token class-name">Method</span> method<span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span> objects<span class="token punctuation">,</span> <span class="token class-name">Object</span> o<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Throwable</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"这里是额外功能，以下是参数"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"method:"</span> <span class="token operator">+</span> method<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"objects:"</span> <span class="token operator">+</span> objects<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"o:"</span> <span class="token operator">+</span> o<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>编写额外功能的切入点，并将切入点与额外功能组合起来</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">aop:</span>config</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">aop:</span>pointcut</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>pc<span class="token punctuation">"</span></span> <span class="token attr-name">expression</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>execution(* *(..))<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">aop:</span>pointcut</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">aop:</span>advisor</span> <span class="token attr-name">advice-ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>before<span class="token punctuation">"</span></span> <span class="token attr-name">pointcut-ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>pc<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">aop:</span>config</span><span class="token punctuation">></span></span>切入点表达式：*  *(..)  --> 所有方法* ---> 修饰符 返回值* ---> 方法名 可以带详细的包名与类名()---> 参数表..---> 对于参数没有要求 (参数有没有，参数有几个都行，参数是什么类型的都行)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>结果展示</p><p><img src="https://cdn.jsdelivr.net/gh/ScarfBear/imgRepo/img/note/spring/%E5%8A%A8%E6%80%81%E4%BB%A3%E7%90%86-MethodBeforeAdvice%E7%BB%93%E6%9E%9C%E5%B1%95%E7%A4%BA.png" alt="image-20210320212713303"></p></li></ol><h4 id="6-6-2-MethodInterceptor"><a href="#6-6-2-MethodInterceptor" class="headerlink" title="6.6.2 MethodInterceptor"></a>6.6.2 MethodInterceptor</h4><ol><li><p>编写额外功能</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Arround</span> <span class="token keyword">implements</span> <span class="token class-name">MethodInterceptor</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">Object</span> <span class="token function">invoke</span><span class="token punctuation">(</span><span class="token class-name">MethodInvocation</span> invocation<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Throwable</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"在前面添加额外功能"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Object</span> proceed <span class="token operator">=</span> invocation<span class="token punctuation">.</span><span class="token function">proceed</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"在后面添加额外功能"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> proceed<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>编写额外功能的切入点，并将切入点与额外功能组合起来</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">aop:</span>advisor</span> <span class="token attr-name">advice-ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>arround<span class="token punctuation">"</span></span>             <span class="token attr-name">pointcut</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>execution(* cn.scarfbear.service.*.*(..))<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">aop:</span>advisor</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>结果展示</p><p><img src="https://cdn.jsdelivr.net/gh/ScarfBear/imgRepo/img/note/spring/%E5%8A%A8%E6%80%81%E4%BB%A3%E7%90%86-MethodInterceptor%E7%BB%93%E6%9E%9C%E5%B1%95%E7%A4%BA.png" alt="image-20210320214530598"></p></li></ol><h3 id="6-3-Aop注解方式使用"><a href="#6-3-Aop注解方式使用" class="headerlink" title="6.3 Aop注解方式使用"></a>6.3 Aop注解方式使用</h3><ol><li><p>开启基于注解的Aop开发</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">aop:</span>aspectj-autoproxy</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">aop:</span>aspectj-autoproxy</span><span class="token punctuation">></span></span>或使用@EnableAspectjAutoProxy<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p>编写额外功能</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Aspect</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyAspect</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Pointcut</span><span class="token punctuation">(</span><span class="token string">"execution(* login(..))"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">pointcut</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Around</span><span class="token punctuation">(</span><span class="token string">"pointcut()"</span><span class="token punctuation">)</span>    <span class="token comment">//@Around("execution(* login(..))")</span>    <span class="token keyword">public</span> <span class="token class-name">Object</span> <span class="token function">arround</span><span class="token punctuation">(</span><span class="token class-name">ProceedingJoinPoint</span> joinPoint<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Throwable</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"这是基于注解的额外功能"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Object</span> ret <span class="token operator">=</span> joinPoint<span class="token punctuation">.</span><span class="token function">proceed</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> ret<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>装入容器中</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>myAspect<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>cn.scarfbear.aop.MyAspect<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>结果展示</p><p><img src="https://cdn.jsdelivr.net/gh/ScarfBear/imgRepo/img/note/spring/%E5%8A%A8%E6%80%81%E4%BB%A3%E7%90%86-%E5%9F%BA%E4%BA%8E%E6%B3%A8%E8%A7%A3%E9%85%8D%E7%BD%AE%E7%BB%93%E6%9E%9C.png" alt="image-20210320222147671"></p></li></ol><h2 id="7-Spring与持久层框架整合"><a href="#7-Spring与持久层框架整合" class="headerlink" title="7. Spring与持久层框架整合"></a>7. Spring与持久层框架整合</h2><h3 id="7-1-整合步骤"><a href="#7-1-整合步骤" class="headerlink" title="7.1 整合步骤"></a>7.1 整合步骤</h3><ol><li><p>环境搭建</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-jdbc<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>5.1.14.RELEASE<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.mybatis<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>mybatis-spring<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.0.2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.alibaba<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>druid<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.1.18<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>mysql<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>mysql-connector-java<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>5.1.48<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.mybatis<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>mybatis<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>3.4.6<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>在Spring配置文件中配置mybatis</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token comment">&lt;!--连接池--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>dataSource<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.alibaba.druid.pool.DruidDataSource<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>driverClassName<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.mysql.jdbc.Driver<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>url<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>jdbc:mysql://localhost:3306/wjx?useSSL=false<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>username<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>root<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>root<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span><span class="token comment">&lt;!--创建SqlSessionFactory SqlSessionFactoryBean--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>sqlSessionFactoryBean<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>org.mybatis.spring.SqlSessionFactoryBean<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>dataSource<span class="token punctuation">"</span></span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>dataSource<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>typeAliasesPackage<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>cn.scarfbear.entity<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>mapperLocations<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>list</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>classpath:cn.scarfbear.mapper/*Mapper.xml<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>list</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span><span class="token comment">&lt;!--创建DAO对象 MapperScannerConfigure--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>scanner<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>org.mybatis.spring.mapper.MapperScannerConfigurer<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    &lt;property name="sqlSessionFactoryBeanName" value="sqlSessionFactoryBean"<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>basePackage<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>cn.scarfbear.mapper<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>编写测试代码</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">StudentMapper</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Select</span><span class="token punctuation">(</span><span class="token string">"select * from student"</span><span class="token punctuation">)</span>    <span class="token class-name">Student</span> <span class="token function">findAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token class-name">ClassPathXmlApplicationContext</span> ctx <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ClassPathXmlApplicationContext</span><span class="token punctuation">(</span><span class="token string">"/applicationContext.xml"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">StudentMapper</span> studentMapper<span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">StudentMapper</span><span class="token punctuation">)</span> ctx<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span><span class="token string">"studentMapper"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">Student</span> all <span class="token operator">=</span> studentMapper<span class="token punctuation">.</span><span class="token function">findAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>all<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>结果展示</p><p><img src="https://cdn.jsdelivr.net/gh/ScarfBear/imgRepo/img/note/spring/%E6%95%B4%E5%90%88mybatis%E7%BB%93%E6%9E%9C%E5%B1%95%E7%A4%BA.png" alt="image-20210321222039147"></p></li></ol><h3 id="7-2-Spring控制事务"><a href="#7-2-Spring控制事务" class="headerlink" title="7.2 Spring控制事务"></a>7.2 Spring控制事务</h3><h4 id="7-2-1-事务属性"><a href="#7-2-1-事务属性" class="headerlink" title="7.2.1 事务属性"></a>7.2.1 事务属性</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Transactional</span><span class="token punctuation">(</span>isloation<span class="token operator">=</span> <span class="token number">1.</span> 隔离属性               propagation<span class="token operator">=</span> <span class="token number">2.</span> 传播属性               readOnly<span class="token operator">=</span> <span class="token number">3.</span> 只读属性               timeout<span class="token operator">=</span> <span class="token number">4.</span> 超时属性               rollbackFor<span class="token operator">=</span> <span class="token number">5.</span> 异常属性 回滚               noRollbackFor<span class="token operator">=</span> <span class="token number">5.</span> 异常属性 提交              <span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="7-2-2-隔离属性"><a href="#7-2-2-隔离属性" class="headerlink" title="7.2.2 隔离属性"></a>7.2.2 隔离属性</h4><p>他描述了事务解决并发问题的特征</p><ol><li><p>有哪些并发问题</p><ul><li><p>脏读</p><p>一个事务，读取了另一个事务中没有提交的数据。会在本事务中产生数据不一致的问题</p><p>解决方案  隔离级别设置为读已提交 @Transactional(isolation=Isolation.READ_COMMITTED)</p></li><li><p>不可重复读</p><p>一个事务中，多次读取相同的数据，但是读取结果不一样。会在本事务中产生数据不一致的问题</p><p>解决方案 隔离级别设置为可重复读 @Transactional(isolation=Isolation.REPEATABLE_READ)<br>本质： 一把行锁</p></li><li><p>幻读</p><p>一个事务中，多次对整表进行查询统计，但是结果不一样，会在本事务中产生数据不一致的问题<br>解决方案 隔离级别设置为串行化 @Transactional(isolation=Isolation.SERIALIZABLE)<br>本质：表锁 </p></li></ul></li><li><p>数据库默认的隔离级别</p><p>MySQL : REPEATABLE_READ<br>Oracle: READ_COMMITTED  </p><p>平常使用默认就足够了</p></li></ol><h4 id="7-2-3-传播属性"><a href="#7-2-3-传播属性" class="headerlink" title="7.2.3 传播属性"></a>7.2.3 传播属性</h4><p>他描述了事务解决嵌套问题的特征</p><ol><li><p>什么是事务的嵌套</p><p>Service调用Service时，会发生事务中还有多个小事务。当内层事务被回滚时，外层事务会怎样？传播属性就是解决事务的嵌套的</p></li><li><p>传播属性的值及其用法</p><table><thead><tr><th>传播属性的值</th><th>外部不存在事务</th><th>外部存在事务</th><th>用法</th><th>备注</th></tr></thead><tbody><tr><td>REQUIRED</td><td>开启新的事务</td><td>融合到外部事务中</td><td>@Transactional(propagation = Propagation.REQUIRED)</td><td>适用增删改方法 （默认的隔离级别）</td></tr><tr><td>SUPPORTS</td><td>不开启事务</td><td>融合到外部事务中</td><td>@Transactional(propagation = Propagation.SUPPORTS)</td><td>适用查询方法</td></tr><tr><td>REQUIRES_NEW</td><td>开启新的事务</td><td>挂起外部事务，创建新的事务</td><td>@Transactional(propagation = Propagation.REQUIRES_NEW)</td><td>日志记录方法中</td></tr><tr><td>NOT_SUPPORTED</td><td>不开启事务</td><td>挂起外部事务</td><td>@Transactional(propagation = Propagation.NOT_SUPPORTED)</td><td>及其不常用</td></tr><tr><td>NEVER</td><td>不开启事务</td><td>抛出异常</td><td>@Transactional(propagation = Propagation.NEVER)</td><td>及其不常用</td></tr><tr><td>MANDATORY</td><td>抛出异常</td><td>融合到外部事务中</td><td>@Transactional(propagation = Propagation.MANDATORY)</td><td>及其不常用</td></tr></tbody></table></li></ol><ul><li>REQUIRED： 增删改查方法肯定是需要一个事务来包裹着的，因此外面不存在事务时需要新建一个事务来包裹，当外层有事务时则融合到外层事务中，不干扰其他事务。</li><li>SUPPORTS： 查询方法则不太需要事务包裹，因此外面不存在事务时则什么也不做，当外部存在事务时则融合，不干扰其他方法</li><li>REQUIRES_NEW：日志本质上是增加一条日志行。因此没事务肯定需要新建一个事务，外部有事务时需要挂起外部事务，这里的挂起理解为暂停外部事务，以内部事务为优先。因为日志操作，就算你操作出现问题被回滚，但操作记录还是应该被记录下来。因此应以日志事务为最高优先级，先提交日志事务，再去操作其他事务。</li></ul><h4 id="7-2-4-只读属性"><a href="#7-2-4-只读属性" class="headerlink" title="7.2.4 只读属性"></a>7.2.4 只读属性</h4><p>针对于只进行查询操作的业务方法，可以加入只读属性，提供运行效率</p><p>默认： false</p><h4 id="7-2-5-超时属性"><a href="#7-2-5-超时属性" class="headerlink" title="7.2.5 超时属性"></a>7.2.5 超时属性</h4><p>指定了事务等待的最长时间</p><ol><li>为什么事务进行等待？<br>当前事务访问数据时，有可能访问的数据被别的事务进行加锁的处理，那么此时本事务就必须进行等待。</li><li>等待时间 ：秒</li><li>超时属性的默认值 -1<br>表示最终由对应的数据库来指定</li></ol><h4 id="7-2-6-异常属性"><a href="#7-2-6-异常属性" class="headerlink" title="7.2.6 异常属性"></a>7.2.6 异常属性</h4><p>Spring事务异常的处理<br>默认 对于RuntimeException及其子类 采用的是回滚的策略<br>默认 对于Exception及其子类 采用的是提交的策略</p><ol><li><p>使用方式</p><p>rollbackFor = {java.lang.Exception,xxx,xxx}<br>noRollbackFor = {java.lang.RuntimeException,xxx,xx}</p><p>推荐使用默认配置，自定义RuntimeException与Exception的子类</p></li></ol><h2 id="8-Spring与MVC框架整合"><a href="#8-Spring与MVC框架整合" class="headerlink" title="8. Spring与MVC框架整合"></a>8. Spring与MVC框架整合</h2><p>暂时不想写~~~</p><h2 id="9-Spring注解方式开发"><a href="#9-Spring注解方式开发" class="headerlink" title="9. Spring注解方式开发"></a>9. Spring注解方式开发</h2><ul><li><p>开发环境搭建</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">context:</span>component-scan</span> <span class="token attr-name">base-package</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>cn.scarfbear<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>作用：让Spring框架在设置包及其子包中扫描对应的注解，使其生效。或者在配置类上使用@ComponentScan("cn.scarfbear")注解<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h3 id="9-1-Spring工厂相关注解"><a href="#9-1-Spring工厂相关注解" class="headerlink" title="9.1 Spring工厂相关注解"></a>9.1 Spring工厂相关注解</h3><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>user<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>cn.scarfbear.entity.User<span class="token punctuation">"</span></span> <span class="token attr-name">scope</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>prototype<span class="token punctuation">"</span></span> <span class="token attr-name">lazy-init</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span><span class="token attr-name">init-method</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span> <span class="token attr-name">destroy-method</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ol><li><p>在类上，多用于自己开发的类上</p><p>bean标签使用@Component替代，相对应的还有衍生注解<br>@Repository —&gt; XXXDAO @Service —&gt; XXXService @Controller —&gt; xxxController</p><p>id默认为类名小写，可在@Component中Value属性中自定义id<br>scope 对应 @scope(“xxx”)注解<br>lazy-init 对应 @Lazy注解<br>init-method 对应 @PostConstruct注解<br>destroy-method 对应 @PreDestroy注解</p></li><li><p>在方法上，多用于整合其他框架</p><p>bean标签使用@Bean注解替换</p><p>id默认为方法名，可在value中自定义。</p></li></ol><h3 id="9-2-Spring注入相关注解"><a href="#9-2-Spring注入相关注解" class="headerlink" title="9.2 Spring注入相关注解"></a>9.2 Spring注入相关注解</h3><ol><li><p>@Autowired【推荐】【注入自定义类型】</p><p>基于类型的注入：注入对象的类型，必须与目标成员变量类型相同或者是其子类（实现类）</p><p>放置位置：成员变量或其set方法上</p></li><li><p>@Autowired+@Qualifier</p><p>基于名字的注入：注入对象的id值，必须与Qualifier注解中设置的名字相同</p></li><li><p>@Value【注入基本类型】</p><p>可以直接在Value中写值</p></li><li><p>@Value+@PropertySource</p><p>@PropertySource中标明Properties文件位置，使用@Value(“${key}”)来引用文件中配置的值</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> Spring </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>JVM</title>
      <link href="2021/03/14/jvm/"/>
      <url>2021/03/14/jvm/</url>
      
        <content type="html"><![CDATA[<h2 id="1-JVM简介"><a href="#1-JVM简介" class="headerlink" title="1. JVM简介"></a>1. JVM简介</h2><h3 id="1-1-虚拟机"><a href="#1-1-虚拟机" class="headerlink" title="1.1 虚拟机"></a>1.1 虚拟机</h3><p>所谓虚拟机（Virtual Machine），就是一台虚拟的计算机。它是一款软件，用来执行一系列虚拟计算机指令。大体上，虚拟机可以分为系统虚拟机和程序虚拟机。</p><ol><li>大名鼎鼎的Virtual Box，VMware就属于系统虚拟机，它们完全是对物理计算机硬件的仿真(模拟)，提供了一个可运行完整操作系统的软件平台。</li><li>程序虚拟机的典型代表就是Java虚拟机，它专门为执行单个计算机程序而设计，在Java虚拟机中执行的指令我们称为Java字节码指令。<br>无论是系统虚拟机还是程序虚拟机，在上面运行的软件都被限制于虚拟机提供的资源中。</li></ol><h3 id="1-2-Java虚拟机"><a href="#1-2-Java虚拟机" class="headerlink" title="1.2 Java虚拟机"></a>1.2 Java虚拟机</h3><p>Java虚拟机是一台执行Java字节码的虚拟计算机，它拥有独立的运行机制，其运行的Java字节码也未必由Java语言编译而成。<br>JVM平台的各种语言可以共享Java虚拟机带来的跨平台性、优秀的垃圾回器，以及可靠的即时编译器。<br>Java技术的核心就是Java虚拟机（JVM，Java Virtual Machine），因为所有的Java程序都运行在Java虚拟机内部。<br>作用：</p><p>Java虚拟机就是二进制字节码的运行环境，负责装载字节码到其内部，解释/编译为对应平台上的机器指令执行。每一条Java指令，Java虚拟机规范中都有详细定义，如怎么取操作数，怎么处理操作数，处理结果放在哪里。</p><p>特点：</p><p>一次编译，到处运行<br>自动内存管理<br>自动垃圾回收功能</p><h3 id="1-3-JVM的架构模型"><a href="#1-3-JVM的架构模型" class="headerlink" title="1.3 JVM的架构模型"></a>1.3 JVM的架构模型</h3><p>Java编译器输入的指令流基本上是一种基于栈的指令集架构，另外一种指令集架构则是基于寄存器的指令集架构。具体来说：这两种架构之间的区别：</p><ol><li>基于栈的指令集架构</li></ol><ul><li>设计和实现更简单，适用于资源受限的系统；</li><li>避开了寄存器的分配难题：使用零地址指令方式分配</li><li>指令流中的指令大部分是零地址指令，其执行过程依赖于操作栈。指令集更小，编译器容易实现</li><li>不需要硬件支持，可移植性更好，更好实现跨平台</li></ul><ol start="2"><li>基于寄存器的指令级架构</li></ol><ul><li>指令集架构则完全依赖硬件，与硬件的耦合度高，可移植性差</li><li>性能优秀和执行更高效</li><li>花费更少的指令去完成一项操作</li><li>在大部分情况下，基于寄存器架构的指令集往往都以一地址指令、二地址指令和三地址指令为主，而基于栈式</li></ul><p>同样执行2+3这种逻辑操作，其指令分别如下：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">基于栈的计算流程iconst_2 <span class="token comment">//常量2入栈</span>istore_1iconst_3 <span class="token comment">// 常量3入栈</span>istore_2iload_1iload_2iadd <span class="token comment">//常量2/3出栈，执行相加</span>istore_0 <span class="token comment">// 结果5入栈</span><span class="token number">8</span>个指令<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>而基于寄存器的计算流程</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">mov eax<span class="token punctuation">,</span><span class="token number">2</span> <span class="token comment">//将eax寄存器的值设为1</span>add eax<span class="token punctuation">,</span><span class="token number">3</span> <span class="token comment">//使eax寄存器的值加3</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="1-4-常见的虚拟机"><a href="#1-4-常见的虚拟机" class="headerlink" title="1.4 常见的虚拟机"></a>1.4 常见的虚拟机</h3><ol><li><p>HotSpot VM（重点）</p><p>最初由一家名为“Longview Technologies”的小公司设计</p><p>目前Hotspot占有绝对的市场地位，称霸武林。</p><p>不管是现在仍在广泛使用的JDK6，还是使用比例较多的JDK8中，默认的虚拟机都是HotSpot</p><p>Sun/oracle JDK和openJDK的默认虚拟机</p><p>因此本课程中默认介绍的虚拟机都是HotSpot，相关机制也主要是指HotSpot的GC机制。（比如其他两个商用虚机都没有方法区的概念）</p><p>名称中的HotSpot指的就是它的热点代码探测技术。</p><p>通过计数器找到最具编译价值代码，触发即时编译或栈上替换</p><p>通过编译器与解释器协同工作，在最优化的程序响应时间与最佳执行性能中取得平衡</p></li><li><p>JRockit（商用三大虚拟机之一）<br>专注于服务器端应用：它可以不太关注程序启动速度，因此JRockit内部不包含解析器实现，全部代码都靠即时编译器编译后执行。</p><p>大量的行业基准测试显示，JRockit JVM是世界上最快的JVM：使用JRockit产品，客户已经体验到了显著的性能提高（一些超过了70%）和硬件成本的减少（达50%）。</p><p>JRockit面向延迟敏感型应用的解决方案JRockit Real Time提供以毫秒或微秒级的JVM响应时间，适合财务、军事指挥、电信网络的需要</p></li><li><p>IBM的J9（商用三大虚拟机之一）<br>全称：IBM Technology for Java Virtual Machine，简称IT4J，内部代号：J9</p><p>市场定位与HotSpot接近，服务器端、桌面应用、嵌入式等多用途VM广泛用于IBM的各种Java产品。</p><p>目前，有影响力的三大商用虚拟机之一，也号称是世界上最快的Java虚拟机。</p><p>2017年左右，IBM发布了开源J9VM，命名为openJ9，交给Eclipse基金会管理，也称为Eclipse OpenJ9</p><p>OpenJDK -&gt; 是JDK开源了，包括了虚拟机</p></li><li><p>Graal VM（未来虚拟机）<br>2018年4月，Oracle Labs公开了GraalvM，号称 “Run Programs Faster Anywhere”，勃勃野心。与1995年java的”write once，run anywhere”遥相呼应。</p><p>GraalVM在HotSpot VM基础上增强而成的跨语言全栈虚拟机，可以作为“任何语言”的运行平台使用。语言包括：Java、Scala、Groovy、Kotlin；C、C++、Javascript、Ruby、Python、R等</p><p>支持不同语言中混用对方的接口和对象，支持这些语言使用已经编写好的本地库文件</p><p>工作原理是将这些语言的源代码或源代码编译后的中间格式，通过解释器转换为能被Graal VM接受的中间表示。Graal VM提供Truffle工具集快速构建面向一种新语言的解释器。在运行时还能进行即时编译优化，获得比原生编译器更优秀的执行效率。</p></li></ol><h2 id="整体架构图"><a href="#整体架构图" class="headerlink" title="整体架构图"></a>整体架构图</h2><p><img src="https://cdn.jsdelivr.net/gh/ScarfBear/imgRepo/img/note/jvm/jvm%E6%9E%B6%E6%9E%84%E5%9B%BE.png"></p><h2 id="2-类加载子系统"><a href="#2-类加载子系统" class="headerlink" title="2. 类加载子系统"></a>2. 类加载子系统</h2><h3 id="2-1-流程：加载-gt-链接（验证-gt-准备-gt-解析）-gt-初始化"><a href="#2-1-流程：加载-gt-链接（验证-gt-准备-gt-解析）-gt-初始化" class="headerlink" title="2.1 流程：加载-&gt;链接（验证-&gt;准备-&gt;解析）-&gt;初始化"></a><strong>2.1 流程：加载-&gt;链接（验证-&gt;准备-&gt;解析）-&gt;初始化</strong></h3><ul><li>加载：通过全限定类名获取类的字节流，转化为方法区的运行时数据结构。在内存中生成一个代表此类的class对象，作为方法区这个类的访问入口</li><li>验证：确认字节流是否符合要求</li><li>准备：为类变量分配<strong>默认</strong>初始值</li><li>解析：将常量池内的符号引用转换为直接引用的过程（<strong>关于【符号引用 –&gt; 直接饮用】的理解</strong><ol><li>上面代码调用 System.out.println() 方法时，首先需要看看 System 类有没有加载，再看看 PrintStream 类有没有加载</li><li>如果没有加载，则执行加载，<strong>执行时，将常量池中的符号引用（字面量）转换为直接引用（真正的地址值）</strong>）</li></ol></li><li>初始化：初始化阶段就是执行类构造器方法clinit的过程，javac编译器自动收集类中的所有类变量的赋值动作和静态代码块中的语句合并而来。也就是说，当我们代码中包含static变量的时候，就会有clinit方法，没有类变量和静态代码块时不存在</li></ul><h3 id="2-2-类加载器"><a href="#2-2-类加载器" class="headerlink" title="2.2 类加载器"></a>2.2 类加载器</h3><p>常见的类加载器</p><ul><li><p><strong>启动类加载器（引导类加载器，Bootstrap ClassLoader）</strong></p><p>加载Java的核心库用于提供JVM自身需要的类，Bootstrap启动类加载器只加载包名为java、javax、sun等开头的类</p></li><li><p><strong>扩展类加载器（Extension ClassLoader）</strong></p><p>加载扩展目录里的类</p></li><li><p><strong>应用程序类加载器（系统类加载器，AppClassLoader）</strong></p><p>类加载是程序中默认的类加载器，一般来说，Java应用的类都是由它来完成加载</p></li></ul><h3 id="2-3-双亲委派机制"><a href="#2-3-双亲委派机制" class="headerlink" title="2.3 双亲委派机制"></a>2.3 双亲委派机制</h3><p><strong>Java虚拟机对class文件采用的是按需加载的方式</strong>，也就是说当需要使用该类时才会将它的class文件加载到内存生成class对象。而且<strong>加载某个类的class文件时，Java虚拟机采用的是双亲委派模式，即把请求交由父类处理，它是一种任务委派模式</strong></p><ol><li><p>如果一个类加载器收到了类加载请求，它并不会自己先去加载，而是把这个请求委托给父类的加载器去执行；</p></li><li><p>如果父类加载器还存在其父类加载器，则进一步向上委托，依次递归，请求最终将到达顶层的启动类加载器；</p></li><li><p>如果父类加载器可以完成类加载任务，就成功返回，倘若父类加载器无法完成此加载任务，子加载器才会尝试自己去加载，这就是双亲委派模式。</p></li><li><p>父类加载器一层一层往下分配任务，如果子类加载器能加载，则加载此类，如果将加载任务分配至系统类加载器也无法加载此类，则抛出异常</p><p>好处：防止核心API被篡改，避免重复加载。</p></li></ol><h2 id="3-程序计数器"><a href="#3-程序计数器" class="headerlink" title="3. 程序计数器"></a>3. 程序计数器</h2><p>PC寄存器用来存储指向下一条指令的地址，也即将要执行的指令代码。由执行引擎读取下一条指令，并执行该指令。</p><h3 id="3-1-为什么需要程序计数器"><a href="#3-1-为什么需要程序计数器" class="headerlink" title="3.1 为什么需要程序计数器"></a>3.1 为什么需要程序计数器</h3><p>cpu在各个线程之间切换后，不知道该线程执行到哪了，此时需要程序计数器里的所指向的地址来确定下一条要执行的指令</p><h2 id="4-虚拟机栈"><a href="#4-虚拟机栈" class="headerlink" title="4. 虚拟机栈"></a>4. 虚拟机栈</h2><h3 id="4-1-栈与堆-栈是运行时的单位，而堆是存储的单位"><a href="#4-1-栈与堆-栈是运行时的单位，而堆是存储的单位" class="headerlink" title="4.1 栈与堆:栈是运行时的单位，而堆是存储的单位"></a>4.1 <strong>栈与堆</strong>:<strong>栈是运行时的单位，而堆是存储的单位</strong></h3><ol><li>栈解决程序的运行问题，即程序如何执行，或者说如何处理数据。</li><li>堆解决的是数据存储的问题，即数据怎么放，放哪里</li></ol><h3 id="4-2-栈存储什么？"><a href="#4-2-栈存储什么？" class="headerlink" title="4.2 栈存储什么？"></a>4.2 <strong>栈存储什么？</strong></h3><ol><li><p>每个线程都有自己的栈，栈中的数据都是以<strong>栈帧</strong>（Stack Frame）的格式存在</p></li><li><p>在这个线程上<strong>正在执行的每个方法都各自对应一个栈帧（Stack Frame）</strong>。</p></li><li><p>栈帧是一个内存区块，是一个数据集，维系着<strong>方法执行</strong>过程中的各种数据信息。</p></li></ol><ul><li><p>栈的内部结构——栈帧</p><ol><li><p>局部变量表（Local Variables）</p><p>定义为一个<strong>数字数组</strong>，主要用于<strong>存储方法参数和定义在方法体内的局部变量</strong>，这些数据类型包括各类基本数据类型、对象引用（reference），以及returnAddress类型。</p><ol><li><strong>局部变量表，最基本的存储单元是Slot（变量槽）</strong>，局部变量表中存放编译期可知的各种基本数据类型（8种），引用类型（reference），returnAddress类型的变量。</li><li>在局部变量表里，<strong>32位以内的类型只占用一个slot</strong>（包括returnAddress类型），<strong>64位的类型占用两个slot</strong>（1ong和double）。</li><li><strong>JVM会为局部变量表中的每一个Slot都分配一个访问索引</strong>，通过这个索引即可成功访问到局部变量表中指定的局部变量值</li><li>栈帧中的局部变量表中的槽位是<strong>可以重用</strong>的，<strong>如果一个局部变量过了其作用域，那么在其作用域之后申明新的局部变量变就很有可能会复用过期局部变量的槽位</strong>，从而达到节省资源的目的。</li></ol></li><li><p>操作数栈（Operand Stack）（或表达式栈）</p><p>操作数栈，<strong>主要用于保存计算过程的中间结果，同时作为计算过程中变量临时的存储空间</strong></p></li><li><p>动态链接（Dynamic Linking）（或指向运行时常量池的方法引用）</p><p>在Java源文件被编译到字节码文件中时，*<em>所有的变量和方法引用都作为符号引用（Symbolic Reference）保存在class文件的常量池里</em>***，动态链接的作用就是为了将这些符号引用转换为调用方法的直接引用</p><ul><li><strong>静态链接</strong>：</li></ul><p>当一个字节码文件被装载进JVM内部时，<strong>如果被调用的目标方法在编译期确定，且运行期保持不变时</strong>，这种情况下将调用方法的符号引用转换为直接引用的过程称之为静态链接</p><ul><li><strong>动态链接</strong>：</li></ul><p><strong>如果被调用的方法在编译期无法被确定下来</strong>，也就是说，<strong>只能够在程序运行期将调用的方法的符号转换为直接引用</strong>，由于这种引用转换过程具备<strong>动态性</strong>，因此也被称之为动态链接。</p></li><li><p>方法返回地址（Return Address）（或方法正常退出或者异常退出的定义）</p></li><li><p>一些附加信息</p></li></ol></li></ul><h2 id="5-本地方法栈"><a href="#5-本地方法栈" class="headerlink" title="5 本地方法栈"></a>5 本地方法栈</h2><ol><li>Java虚拟机栈于管理Java方法的调用，而<strong>本地方法栈用于管理本地方法的调用</strong>。</li><li>本地方法栈，也是线程私有的。</li><li>允许被实现成<strong>固定或者是可动态扩展的内存大小</strong>（在内存溢出方面和虚拟机栈相同）<ul><li>如果线程请求分配的栈容量超过本地方法栈允许的最大容量，Java虚拟机将会抛出一个stackoverflowError 异常。</li><li>如果本地方法栈可以动态扩展，并且在尝试扩展的时候无法申请到足够的内存，或者在创建新的线程时没有足够的内存去创建对应的本地方法栈，那么Java虚拟机将会抛出一个outofMemoryError异常。</li></ul></li><li>本地方法一般是使用C语言实现的。</li><li>它的具体做法是Native Method Stack中登记native方法，在Execution Engine 执行时加载本地方法库。</li></ol><h2 id="6-堆"><a href="#6-堆" class="headerlink" title="6 堆"></a>6 堆</h2><p>Java 8及之后堆内存逻辑上分为三部分：新生区+养老区+元空间</p><ul><li>Young/New Generation Space 新生区，又被划分为Eden区和Survivor区</li><li>Old/Tenure generation space 养老区</li><li>Meta Space 元空间 Meta</li></ul><h3 id="6-1-对象分配过程"><a href="#6-1-对象分配过程" class="headerlink" title="6.1 对象分配过程"></a>6.1 <strong>对象分配过程</strong></h3><ol><li>new的对象先放伊甸园区。此区有大小限制。</li><li>当伊甸园的空间填满时，程序又需要创建对象，JVM的垃圾回收器将对伊甸园区进行垃圾回收（MinorGC），将伊甸园区中的不再被其他对象所引用的对象进行销毁。再加载新的对象放到伊甸园区。</li><li>然后将伊甸园中的剩余对象移动到幸存者0区。</li><li>如果再次触发垃圾回收，此时上次幸存下来的放到幸存者0区的，如果没有回收，就会放到幸存者1区。</li><li>如果再次经历垃圾回收，此时会重新放回幸存者0区，接着再去幸存者1区。</li><li>啥时候能去养老区呢？可以设置次数。默认是15次。可以设置新生区进入养老区的年龄限制，设置 JVM 参数：**-XX:MaxTenuringThreshold**=N 进行设置</li><li>在养老区，相对悠闲。当养老区内存不足时，再次触发GC：Major GC，进行养老区的内存清理</li><li>若养老区执行了Major GC之后，发现依然无法进行对象的保存，就会产生OOM异常。</li></ol><h3 id="6-2-TLAB-分配过程"><a href="#6-2-TLAB-分配过程" class="headerlink" title="6.2 TLAB 分配过程"></a>6.2 TLAB 分配过程</h3><blockquote><p><strong>什么是 TLAB？</strong></p></blockquote><ol><li>从内存模型而不是垃圾收集的角度，对Eden区域继续进行划分，<strong>JVM为每个线程分配了一个私有缓存区域，它包含在Eden空间内</strong>。</li><li>多线程同时分配内存时，<strong>使用TLAB可以避免一系列的非线程安全问题，同时还能够提升内存分配的吞吐量</strong>，因此我们可以将这种内存分配方式称之为<strong>快速分配策略</strong>。</li><li>据我所知所有OpenJDK衍生出来的JVM都提供了TLAB的设计。</li></ol><h3 id="6-3-常用参数设置"><a href="#6-3-常用参数设置" class="headerlink" title="6.3 常用参数设置"></a>6.3 常用参数设置</h3><ol><li><strong>-XX:+PrintFlagsInitial</strong>：查看所有的参数的默认初始值</li><li><strong>-XX:+PrintFlagsFinal</strong>：查看所有的参数的最终值（可能会存在修改，不再是初始值）</li><li>-Xms：初始堆空间内存（默认为物理内存的1/64）</li><li><strong>-Xmx</strong>：最大堆空间内存（默认为物理内存的1/4）</li><li><strong>-Xmn</strong>：设置新生代的大小（初始值及最大值）</li><li><strong>-XX:NewRatio</strong>：配置新生代与老年代在堆结构的占比</li><li><strong>-XX:SurvivorRatio</strong>：设置新生代中Eden和S0/S1空间的比例</li><li><strong>-XX:MaxTenuringThreshold</strong>：设置新生代垃圾的最大年龄</li><li><strong>-XX:+PrintGCDetails</strong>：输出详细的GC处理日志</li><li><strong>-XX:+PrintGC</strong> 或 -verbose:gc ：打印gc简要信息</li><li><strong>-XX:HandlePromotionFalilure</strong>：是否设置空间分配担保</li></ol><h3 id="6-4-空间分配担保"><a href="#6-4-空间分配担保" class="headerlink" title="6.4 空间分配担保"></a>6.4 空间分配担保</h3><p><strong>在发生Minor GC之前，虚拟机会检查老年代最大可用的连续空间是否大于新生代所有对象的总空间。</strong></p><ul><li><p>如果大于，则此次Minor GC是安全的</p></li><li><p>如果小于，则虚拟机会查看**-XX:HandlePromotionFailure**设置值是否允担保失败。</p><ul><li><p>如果HandlePromotionFailure=true，那么会继续检查</p><p>老年代最大可用连续空间是否大于历次晋升到老年代的对象的平均大小</p><ul><li>如果大于，则尝试进行一次Minor GC，但这次Minor GC依然是有风险的；</li></ul></li></ul></li><li><p>如果小于，则进行一次Full GC。</p><ul><li>如果HandlePromotionFailure=false，则进行一次Full GC。</li></ul></li></ul><h2 id="7-方法区"><a href="#7-方法区" class="headerlink" title="7. 方法区"></a>7. 方法区</h2><h3 id="7-1-栈、堆、方法区的交互关系"><a href="#7-1-栈、堆、方法区的交互关系" class="headerlink" title="7.1 栈、堆、方法区的交互关系"></a>7.1 <strong>栈、堆、方法区的交互关系</strong></h3><p><strong>下面就涉及了对象的访问定位</strong></p><ol><li>Person 类的 .class 信息存放在方法区中</li><li>person 变量存放在 Java 栈的局部变量表中</li><li>真正的 person 对象存放在 Java 堆中</li><li>在 person 对象中，有个指针指向方法区中的 person 类型数据，表明这个 person 对象是用方法区中的 Person 类 new 出来的</li></ol><h3 id="7-2-Hotspot-方法区的演进过程"><a href="#7-2-Hotspot-方法区的演进过程" class="headerlink" title="7.2 Hotspot 方法区的演进过程"></a>7.2 <strong>Hotspot 方法区的演进过程</strong></h3><ol><li><strong>在 JDK7 及以前，习惯上把方法区，称为永久代。JDK8开始，使用元空间取代了永久代</strong>。JDK 1.8后，元空间存放在<strong>堆外内存中</strong></li><li>我们可以将方法区类比为Java中的接口，将永久代或元空间类比为Java中具体的实现类</li><li>本质上，方法区和永久代并不等价。仅是对Hotspot而言的可以看作等价。《Java虚拟机规范》对如何实现方法区，不做统一要求。例如：BEAJRockit / IBM J9 中不存在永久代的概念。</li><li>现在来看，当年使用永久代，不是好的idea。导致Java程序更容易OOm（超过-XX:MaxPermsize上限）</li><li>而到了JDK8，终于完全废弃了永久代的概念，改用与JRockit、J9一样在本地内存中实现的元空间（Metaspace）来代替</li><li>元空间的本质和永久代类似，都是对JVM规范中方法区的实现。不过元空间与永久代最大的区别在于：<strong>元空间不在虚拟机设置的内存中，而是使用本地内存</strong></li><li>永久代、元空间二者并不只是名字变了，<strong>内部结构也调整了</strong></li><li>根据《Java虚拟机规范》的规定，如果方法区无法满足新的内存分配需求时，将抛出OOM异常</li></ol><h3 id="7-3-方法区结构"><a href="#7-3-方法区结构" class="headerlink" title="7.3 方法区结构"></a>7.3 方法区结构</h3><p>它用于存储已被虚拟机<strong>加载的类型信息、常量、静态变量、即时编译器编译后的代码缓存</strong>等。</p><blockquote><p><strong>类型信息</strong></p></blockquote><p>对每个加载的类型（类class、接口interface、枚举enum、注解annotation），JVM必须在方法区中存储以下类型信息：</p><ol><li>这个类型的完整有效名称（全名=包名.类名）</li><li>这个类型直接父类的完整有效名（对于interface或是java.lang.Object，都没有父类）</li><li>这个类型的修饰符（public，abstract，final的某个子集）</li><li>这个类型直接接口的一个有序列表</li></ol><blockquote><p><strong>域（Field）信息</strong></p></blockquote><ol><li>JVM必须在方法区中保存类型的所有域的相关信息以及域的声明顺序。</li><li>域的相关信息包括：<ul><li>域名称</li><li>域类型</li><li>域修饰符（public，private，protected，static，final，volatile，transient的某个子集）</li></ul></li></ol><blockquote><p><strong>方法（Method）信息</strong></p></blockquote><p>JVM必须保存所有方法的以下信息，同域信息一样包括声明顺序：</p><ol><li>方法名称</li><li>方法的返回类型（包括 void 返回类型），void 在 Java 中对应的类为 void.class</li><li>方法参数的数量和类型（按顺序）</li><li>方法的修饰符（public，private，protected，static，final，synchronized，native，abstract的一个子集）</li><li>方法的字节码（bytecodes）、操作数栈、局部变量表及大小（abstract和native方法除外）</li><li>异常表（abstract和native方法除外），异常表记录每个异常处理的开始位置、结束位置、代码处理在程序计数器中的偏移地址、被捕获的异常类的常量池索引</li></ol><h3 id="7-4-运行时常量池"><a href="#7-4-运行时常量池" class="headerlink" title="7.4 运行时常量池"></a>7.4 运行时常量池</h3><blockquote><p><strong>运行时常量池 VS 常量池</strong></p></blockquote><ol><li><strong>方法区，内部包含了运行时常量池</strong></li><li><strong>字节码文件，内部包含了常量池</strong></li><li>要弄清楚方法区，需要理解清楚ClassFile，因为加载类的信息都在方法区。</li><li>要弄清楚方法区的运行时常量池，需要理解清楚ClassFile中的常量池。</li></ol><blockquote><p><strong>常量池</strong></p></blockquote><ol><li>一个有效的字节码文件中除了包含类的版本信息、字段、方法以及接口等描述符信息外</li><li>还包含一项信息就是<strong>常量池表</strong>（<strong>Constant Pool Table</strong>），包括<strong>各种字面量和对类型、域和方法的符号引用</strong></li></ol><blockquote><p><strong>为什么需要常量池？</strong></p></blockquote><ol><li>一个java源文件中的类、接口，编译后产生一个字节码文件。而Java中的字节码需要数据支持，通常这种数据会很大以至于不能直接存到字节码里，换另一种方式，可以存到常量池</li><li>这个字节码包含了指向常量池的引用。在动态链接的时候会用到运行时常量池，之前有介绍</li></ol><blockquote><p><strong>常量池中有啥？</strong></p></blockquote><ol><li>数量值</li><li>字符串值</li><li>类引用</li><li>字段引用</li><li>方法引用</li></ol><blockquote><p><strong>常量池总结</strong></p></blockquote><p>常量池、可以看做是一张表，虚拟机指令根据这张常量表找到要执行的类名、方法名、参数类型、字面量等类型</p><blockquote><p><strong>运行时常量池</strong></p></blockquote><ol><li><strong>运行时常量池（Runtime Constant Pool）是方法区的一部分</strong>。</li><li><strong>常量池表（Constant Pool Table）是Class字节码文件的一部分，用于存放编译期生成的各种字面量与符号引用，这部分内容将在类加载后存放到方法区的运行时常量池中</strong>。</li><li>字节码中的常量池，在加载类和接口到虚拟机后，就会创建对应的运行时常量池。</li><li><strong>JVM为每个已加载的类型（类或接口）都维护一个常量池。池中的数据项像数组项一样，是通过索引访问的</strong>。</li><li>运行时常量池中包含多种不同的常量，包括编译期就已经明确的数值字面量，也包括到运行期解析后才能够获得的方法或者字段引用。<strong>此时不再是常量池中的符号地址了，这里换为真实地址</strong>。</li><li>运行时常量池，相对于Class文件常量池的另一重要特征是：具备动态性。</li><li>运行时常量池类似于传统编程语言中的符号表（symbol table），但是它所包含的数据却比符号表要更加丰富一些。</li><li>当创建类或接口的运行时常量池时，如果构造运行时常量池所需的内存空间超过了方法区所能提供的最大值，则JVM会抛OutofMemoryError异常。</li></ol><h2 id="8-String"><a href="#8-String" class="headerlink" title="8. String"></a>8. String</h2><h3 id="8-1-不同的方式创建的的String的区别"><a href="#8-1-不同的方式创建的的String的区别" class="headerlink" title="8.1 不同的方式创建的的String的区别"></a>8.1 不同的方式创建的的String的区别</h3><ol><li><p>字面量方式创建：String s1= “aaa”;   //此时会在字符串常量池中创建对象</p></li><li><p>new String方式创建：String s2 = new String(“aaa”);  //此时也会在字符串常量池中创建对象，并且因为new关键词的缘故，会在堆中也创建对象，并且返回的是堆中的变量</p><p>接下来是各种骚操作</p><hr></li><li><p>用字面量相加来拼接字符串：String s3 = “aaa” + “bbb”; //此时会因为编译器优化变成String s3 = “aaabbb”</p></li><li><p>用变量相加来拼接字符串：String s4 = s3 + “bbb”; //底层是使用StringBuilder的appear方法来拼接的，最后调用toString()方法来赋值给s4，对象在堆中</p></li><li><p>new 对象来拼接：String s5 = new String(“aaa”) + new String(“bbb”); //与变量拼接一样，总共会创建6个对象，字符串常量池中aaa,bbb。堆中aaa,bbb,aaabbb。再加上用来拼接的StringBuilder。最后对象也是在</p></li></ol><h3 id="8-2-intern方法"><a href="#8-2-intern方法" class="headerlink" title="8.2 intern方法"></a>8.2 intern方法</h3><p>调用此方法的字符串如果在字符串常量池中，则不会有任何影响</p><p>调用此方法的字符串如果在堆中，则会在字符串常量池中存储一份堆中的地址，然后返回字符串常量池中的地址。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">String</span> s1 <span class="token operator">=</span> <span class="token string">"aaa"</span><span class="token punctuation">;</span><span class="token class-name">String</span> s2 <span class="token operator">=</span> s1 <span class="token operator">+</span> <span class="token string">"bbb"</span><span class="token punctuation">;</span>s2<span class="token punctuation">.</span><span class="token function">intern</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//此时字符串常量池中没有aaabbb</span><span class="token class-name">String</span> s3 <span class="token operator">=</span> <span class="token string">"aaabbb"</span><span class="token punctuation">;</span> <span class="token comment">//s3指向的是之前intern方法在字符串常量池中创建的地址，该地址指向堆中的对象</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s2 <span class="token operator">==</span> s3<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//都是堆中的对象，true;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="9-执行引擎"><a href="#9-执行引擎" class="headerlink" title="9. 执行引擎"></a>9. 执行引擎</h2><h3 id="9-1-执行引擎的组成"><a href="#9-1-执行引擎的组成" class="headerlink" title="9.1 执行引擎的组成"></a>9.1 执行引擎的组成</h3><ol><li>解释器：当Java虚拟机启动时会根据预定义的规范对字节码采用逐行解释的方式执行，将每条字节码文件中的内容“翻译”为对应平台的本地机器指令执行。</li><li>JIT（Just In Time Compiler）编译器：就是虚拟机将源代码一次性直接编译成和本地机器平台相关的机器语言，但并不是马上执行。</li></ol><h3 id="9-2-解释器是低效的代名词，为什么还需要"><a href="#9-2-解释器是低效的代名词，为什么还需要" class="headerlink" title="9.2 解释器是低效的代名词，为什么还需要"></a>9.2 解释器是低效的代名词，为什么还需要</h3><ol><li>当程序启动后，解释器可以马上发挥作用，响应速度快，省去编译的时间，立即执行。</li><li>编译器要想发挥作用，把代码编译成本地代码，需要一定的执行时间，但编译为本地代码后，执行效率高。</li></ol><h3 id="9-3-如何进行热点探测"><a href="#9-3-如何进行热点探测" class="headerlink" title="9.3 如何进行热点探测"></a>9.3 如何进行热点探测</h3><ol><li><p>方法计数器</p><p><img src="https://cdn.jsdelivr.net/gh/ScarfBear/imgRepo/img/note/jvm/20210128180840.png"></p></li><li><p>回边计数器</p><p><img src="https://cdn.jsdelivr.net/gh/ScarfBear/imgRepo/img/note/jvm/20210128181041.png" alt="image-20210128180923215"></p></li></ol><h3 id="9-4-JIT编译器的分类"><a href="#9-4-JIT编译器的分类" class="headerlink" title="9.4 JIT编译器的分类"></a>9.4 JIT编译器的分类</h3><p>在HotSpot VM中内嵌有两个JIT编译器，分别为Client Compiler和Server Compiler，但大多数情况下我们简称为C1编译器 和 C2编译器。开发人员可以通过如下命令显式指定Java虚拟机在运行时到底使用哪一种即时编译器</p><ol><li>-client：指定Java虚拟机运行在Client模式下，并使用C1编译器；<br>C1编译器会对字节码进行简单和可靠的优化，耗时短，以达到更快的编译速度。</li><li>-server：指定Java虚拟机运行在server模式下，并使用C2编译器。<br>C2进行耗时较长的优化，以及激进优化，但优化的代码执行效率更高。（使用C++）</li></ol><h2 id="10-垃圾回收"><a href="#10-垃圾回收" class="headerlink" title="10. 垃圾回收"></a>10. 垃圾回收</h2><h3 id="10-1-什么是垃圾"><a href="#10-1-什么是垃圾" class="headerlink" title="10.1 什么是垃圾"></a>10.1 什么是垃圾</h3><p>垃圾是指在运行程序中没有任何引用指向的对象，这个对象就是需要被回收的垃圾。</p><h3 id="10-2-如何确认垃圾"><a href="#10-2-如何确认垃圾" class="headerlink" title="10.2 如何确认垃圾"></a>10.2 如何确认垃圾</h3><ol><li><p>引用计数算法</p><p>引用计数算法（Reference Counting）比较简单，对每个对象保存一个整型的引用计数器属性。用于记录对象被引用的情况。<br>对于一个对象A，只要有任何一个对象引用了A，则A的引用计数器就加1；当引用失效时，引用计数器就减1。只要对象A的引用计数器的值为0，即表示对象A不可能再被使用，可进行回收。</p><p>优点：实现简单，垃圾对象便于辨识；判定效率高，回收没有延迟性。<br>缺点：它需要单独的字段存储计数器，这样的做法增加了存储空间的开销。<br>每次赋值都需要更新计数器，伴随着加法和减法操作，这增加了时间开销。<br>引用计数器有一个严重的问题，即无法处理循环引用的情况。这是一条致命缺陷，导致在Java的垃圾回收器中没有使用这类算法。</p></li></ol><ol start="2"><li><p>可达性分析算法</p><p>可达性分析算法是以根对象集合（GCRoots）为起始点，按照从上至下的方式搜索被根对象集合所连接的目标对象是否可达。<br>使用可达性分析算法后，内存中的存活对象都会被根对象集合直接或间接连接着，搜索所走过的路径称为引用链（Reference Chain）<br>如果目标对象没有任何引用链相连，则是不可达的，就意味着该对象己经死亡，可以标记为垃圾对象。<br>在可达性分析算法中，只有能够被根对象集合直接或者间接连接的对象才是存活对象。</p></li></ol><ol start="3"><li><p>何为GCRoots</p><p>虚拟机栈、本地方法栈、方法区、字符串常量池等地方对堆空间进行引用的，都可以作为GC Roots进行可达性分析</p></li></ol><h3 id="10-3-几种垃圾回收算法"><a href="#10-3-几种垃圾回收算法" class="headerlink" title="10.3 几种垃圾回收算法"></a>10.3 几种垃圾回收算法</h3><ol><li><p>标记清除算法</p><p>标记：Collector从引用根节点开始遍历，标记所有被引用的对象。一般是在对象的Header中记录为可达对象。<br>注意：标记的是被引用的对象，也就是可达对象，并非标记的是即将被清除的垃圾对象<br>清除：Collector对堆内存从头到尾进行线性的遍历，如果发现某个对象在其Header中没有标记为可达对象，则将其回收</p><p><img src="https://cdn.jsdelivr.net/gh/ScarfBear/imgRepo/img/note/jvm/%E6%A0%87%E8%AE%B0%E6%B8%85%E9%99%A4%E7%AE%97%E6%B3%95%E5%9B%BE.png" alt="image-20210128190919569"></p><p>标记-清除算法的缺点</p><ol><li>标记清除算法的效率不算高</li><li>在进行GC的时候，需要停止整个应用程序，用户体验较差</li><li>这种方式清理出来的空闲内存是不连续的，产生内碎片，需要维护一个空闲列表</li></ol><p>注意：何为清除？</p><p>这里所谓的清除并不是真的置空，而是把需要清除的对象地址保存在空闲的地址列表里。下次有新对象需要加载时，判断垃圾的位置空间是否够，如果够，就存放（也就是覆盖原有的地址）。</p></li><li><p>复制算法（Copying）</p><p>将活着的内存空间分为两块，每次只使用其中一块，在垃圾回收时将正在使用的内存中的存活对象复制到未被使用的内存块中，之后清除正在使用的内存块中的所有对象，交换两个内存的角色，最后完成垃圾回收</p></li></ol><p>   <img src="https://cdn.jsdelivr.net/gh/ScarfBear/imgRepo/img/note/jvm/%E5%A4%8D%E5%88%B6%E7%AE%97%E6%B3%95.png" alt="image-20210128191307158"></p><p>   优点</p><ol><li>没有标记和清除过程，实现简单，运行高效</li><li>复制过去以后保证空间的连续性，不会出现“碎片”问题。</li></ol><p>   缺点</p><ol><li>此算法的缺点也是很明显的，就是需要两倍的内存空间。</li></ol><ol start="3"><li><p>标记-压缩算法（Mark-Compact）</p><p>第一阶段和标记清除算法一样，从根节点开始标记所有被引用对象</p><p>第二阶段将所有的存活对象压缩到内存的一端，按顺序排放。之后，清理边界外所有的空间。</p><p><img src="https://cdn.jsdelivr.net/gh/ScarfBear/imgRepo/img/note/jvm/%E6%A0%87%E8%AE%B0%E6%95%B4%E7%90%86%E7%AE%97%E6%B3%95.png" alt="image-20210128191925593"></p><p>优点</p><ol><li>消除了标记-清除算法当中，内存区域分散的缺点，我们需要给新对象分配内存时，JVM只需要持有一个内存的起始地址即可。</li><li>消除了复制算法当中，内存减半的高额代价。</li></ol><p>缺点</p><ol><li>从效率上来说，标记-整理算法要低于复制算法。</li><li>移动对象的同时，如果对象被其他对象引用，则还需要调整引用的地址（因为HotSpot虚拟机采用的不是句柄池的方式，而是直接指针）</li><li>移动过程中，需要全程暂停用户应用程序。即：STW</li></ol></li><li><p>对比</p></li></ol><table><thead><tr><th></th><th>标记清除</th><th>复制</th><th>标记整理</th></tr></thead><tbody><tr><td>速率</td><td>中等</td><td>最快</td><td>最慢</td></tr><tr><td>空间开销</td><td>少（但会堆积碎片）</td><td>通常需要活对象的2倍空间（不堆积碎片）</td><td>少（但会堆积碎片）</td></tr><tr><td>移动对象</td><td>否</td><td>是</td><td>是</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> jvm </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="1999/02/01/hello-world/"/>
      <url>1999/02/01/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo new <span class="token string">"My New Post"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo server<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo generate<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo deploy<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
